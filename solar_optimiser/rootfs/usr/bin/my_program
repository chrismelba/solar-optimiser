#!/usr/bin/python3

from flask import Flask, render_template, jsonify, request, redirect, url_for
import os
import logging
import json
import requests

# Set up logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# Configuration file path
CONFIG_FILE = '/data/solar_config.json'

def load_config():
    if os.path.exists(CONFIG_FILE):
        with open(CONFIG_FILE, 'r') as f:
            return json.load(f)
    return {
        'solar_generation': '',
        'grid_power': '',
        'solar_forecast': ''
    }

def save_config(config):
    with open(CONFIG_FILE, 'w') as f:
        json.dump(config, f)

def get_hass_entities():
    # Get Home Assistant token from environment
    hassio_token = os.getenv("HASSIO_TOKEN")
    
    if not hassio_token:
        logger.error("No HASSIO_TOKEN found in environment")
        return []
    
    # Debug log the token (first 10 chars only for security)
    logger.debug(f"HASSIO_TOKEN found: {hassio_token[:10]}...")
    
    try:
        headers = {
            "X-Hassio-Key": hassio_token,
            "Content-Type": "application/json",
        }
        
        # Debug log the header (first part only for security)
        logger.debug(f"Using X-Hassio-Key header: {hassio_token[:10]}...")
        
        # Use the standard Home Assistant add-on URL
        hass_url = "http://supervisor/core"
        
        # First test authentication with /api/services
        logger.debug(f"Testing authentication with {hass_url}/api/services")
        test_response = requests.get(f"{hass_url}/api/services", headers=headers)
        test_response.raise_for_status()
        logger.debug("Authentication test successful")
        
        # Now get states from Home Assistant
        logger.debug(f"Attempting to access Home Assistant at: {hass_url}/api/states")
        response = requests.get(f"{hass_url}/api/states", headers=headers)
        response.raise_for_status()
        
        entities = response.json()
        logger.debug(f"Successfully retrieved {len(entities)} entities from Home Assistant")
        
        # Log some example entities for debugging
        for entity in entities[:5]:
            logger.debug(f"Example entity: {entity.get('attributes', {}).get('friendly_name')} ({entity.get('entity_id')})")
        
        return entities
    except Exception as e:
        logger.error(f"Failed to get entities from Home Assistant: {e}")
        return []

@app.route('/')
def index():
    logger.debug('Received request for index page')
    return render_template('index.html')

@app.route('/configure/solar', methods=['GET', 'POST'])
def configure_solar():
    logger.debug('Received request for solar configuration page')
    
    if request.method == 'POST':
        config = {
            'solar_generation': request.form.get('solar_generation'),
            'grid_power': request.form.get('grid_power'),
            'solar_forecast': request.form.get('solar_forecast')
        }
        save_config(config)
        return redirect(url_for('configure_solar'))
    
    # Get Home Assistant entities
    entities = get_hass_entities()
    
    return render_template('configure_solar.html', 
                         entities=entities,
                         config=load_config())

@app.route('/configure/battery')
def configure_battery():
    logger.debug('Received request for battery configuration page')
    return render_template('configure_battery.html')

@app.route('/configure/devices')
def configure_devices():
    logger.debug('Received request for devices configuration page')
    return render_template('configure_devices.html')

@app.route('/api/status')
def status():
    logger.debug('Received request for status API')
    return jsonify({
        'status': 'running',
        'version': '1.0.0'
    })

if __name__ == '__main__':
    logger.info('Starting Flask application...')
    logger.info('Templates directory: %s', app.template_folder)
    logger.info('Static directory: %s', app.static_folder)
    app.run(host='0.0.0.0', port=8080, debug=True)
